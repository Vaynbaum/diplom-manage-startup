version: "3.6"
services:
  redis_service:
    image: redis:latest
    container_name: redis_service
    networks:
      - microservices
    ports:
      - "6379:6379"
    expose:
      - 6379
  
  postgres_db:
      image: postgres:14
      env_file: 
      - .env
      container_name: postgres_db
      volumes:
        - .:/docker-entrypoint-initdb.d
      ports:
        - "5432:5432"
      expose:
        - 5432
      networks:
        - microservices
  
  typesense_service:
    image: typesense/typesense:26.0
    restart: on-failure
    container_name: typesense_service
    ports:
      - "8108:8108"
    expose:
      - 8108
    volumes:
      - ./typesense-data:/data
    command: '--data-dir /data --api-key=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'
    networks:
      - microservices

  api:
    image: api
    build: ./backend/api
    container_name: api
    restart: always
    depends_on:
      - redis_service
      - typesense_service
      - postgres_db
    env_file: 
      - .env
    ports:
      - "8000:8000"
    expose:
      - 8000
    networks:
      - microservices
  
  indexer:
    image: indexer
    build: ./backend/indexer
    container_name: indexer
    restart: always
    depends_on:
      - typesense_service
      - postgres_db
    env_file: 
      - ind.env
    ports:
      - "8006:8006"
    expose:
      - 8006
    networks:
      - microservices

  mailer:
    image: mailer
    build: ./backend/mailer
    container_name: mailer
    restart: always
    env_file: 
      - mail.env
    ports:
      - "8002:8002"
    expose:
      - 8002
    networks:
      - microservices

  message:
    image: message
    build: ./backend/message
    container_name: message
    restart: always
    depends_on:
      - postgres_db
    env_file: 
      - msg.env
    ports:
      - "8003:8003"
    expose:
      - 8003
    networks:
      - microservices

  note:
    image: note
    build: ./backend/note
    container_name: note
    restart: always
    depends_on:
      - postgres_db
    env_file: 
      - note.env
    ports:
      - "8004:8004"
    expose:
      - 8004
    networks:
      - microservices
  
  upload_file:
    image: upload_file
    build: ./backend/upload_file
    container_name: upload_file
    restart: always
    env_file:
      - file.env
    ports:
      - "8005:8005"
    expose:
      - 8005
    networks:
      - microservices
    
  frontend:
    image: frontend
    build: ./pro-connect
    container_name: frontend
    restart: always
    depends_on:
      - proxy_service
      - api
      - upload_file
      - note
      - message
    networks:
      - microservices
    ports:
      - 4200:4200
    expose:
      - 4200
  
  celery_service:
    image: celery_service
    build:
      context: ./backend/api
      dockerfile: Dockerfile.celery
    env_file: .env
    container_name: celery_service
    depends_on:
      - redis_service
    networks:
      - microservices

  flower_service:
    image: flower_service
    build:
      context: ./backend/api
      dockerfile: Dockerfile.flower
    container_name: flower_service
    env_file: .env
    depends_on:
      - redis_service
      - celery_service
    networks:
      - microservices
    ports:
      - 5555:5555

  beat_service:
    image: beat_service
    build:
      context: ./backend/api
      dockerfile: Dockerfile.beat
    env_file: .env
    container_name: beat_service
    depends_on:
      - redis_service
    networks:
      - microservices

  proxy_service:
    image: proxy_service
    build: ./ng
    container_name: proxy_service
    restart: always
    volumes:
      - ./ng/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - microservices
    depends_on:
      - api
      - upload_file
      - note
      - message
    ports:
      - 80:80
    expose:
      - 80

networks:
  microservices:
    driver: bridge
